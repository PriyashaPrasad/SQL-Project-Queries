/*Codecasemy pro - What is Churn?

Churn rate is the percent of subscribers that have canceled within a certain period, usually a month. For a user base to grow, the churn rate must be less than the new subscriber rate for the same period.

To calculate the churn rate, we only will be considering users who are subscribed at the beginning of the month. The churn rate is the number of these users who cancel during the month divided by the total number:

Churn
For example, suppose you were analyzing data for a monthly video streaming service called CodeFlix. At the beginning of February, CodeFlix has 1,000 customers. In February, 250 of these customers cancel. The churn rate for February would be:

250 / 1000 = 25% churn rate

The dataset provided to you contains one SQL table, subscriptions. Within the table, there are 4 columns:

id - the subscription id
subscription_start - the start date of the subscription
subscription_end - the end date of the subscription
segment - this identifies which segment the subscription owner belongs to
Codeflix requires a minimum subscription length of 31 days, so a user can never start and end their subscription in the same month.*/

--1.Take a look at the first 100 rows of data in the subscriptions table. How many different segments do you see?
select *
from subscriptions
limit 100;

--Determine the range of months of data provided. Which months will you be able to calculate churn for?

select min(subscription_start), max(subscription_start)
from subscriptions;

--You’ll be calculating the churn rate for both segments (87 and 30) over the first 3 months of 2017 
(you can’t calculate it for December, since there are no subscription_end values yet). To get started, create a temporary table of months.
 with months as
( select
'2017-01-01' as first_day,
'2017-01-31' as last_day
union
select
'2017-02-01' as first_day,
'2017-02-28' as last_day
union
select
'2017-03-01' as first_day,
'2017-03-31' as last_day
),
cross_join as
(select *
from subscriptions
cross join months
),
status as
(select 
id,
first_day as monthm,
CASE
  WHEN (subscription_start < first_day) 
    AND (subscription_end > first_day
      OR subscription_end IS NULL)
    AND (segment = 87)
    THEN 1
  ELSE 0
END as is_active_87,
CASE
  WHEN (subscription_start < first_day) 
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL)
    AND (segment = 30)
    THEN 1
  ELSE 0
END as is_active_30,
case
when (subscription_end between first_day and last_day) and (segment = 87)
THEN 1
ELSE 0
END AS is_canceled_87,
case
when (subscription_end between first_day and last_day) and (segment = 30)
THEN 1
ELSE 0
END AS is_canceled_30
FROM cross_join),
status_aggregate as
(
  select 
  monthm,
  sum(is_active_87) as sum_active_87,
  sum(is_active_30) as sum_active_30,
  sum(is_canceled_87) as sum_canceled_87,
  sum(is_canceled_30) as sum_canceled_30
  from status
  group by monthm
)
select 
monthm,
1.0*sum_canceled_87/sum_active_87 as churn_rate_87,
1.0*sum_canceled_87/sum_active_30 as churn_rate_30
from status_aggregate;

Output : 

monthm	churn_rate_87	churn_rate_30
2017-01-01	0.251798561151079	0.240549828178694
2017-02-01	0.32034632034632	0.285714285714286
2017-03-01	0.485875706214689	0.360335195530726





